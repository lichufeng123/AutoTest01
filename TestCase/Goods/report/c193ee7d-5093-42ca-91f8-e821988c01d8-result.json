{"name": "test01_GoodsCreate[data0-120003]", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n..\\..\\.venv\\lib\\site-packages\\requests\\models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000002A3EE8544C0>\ns = '<html>\\r\\n<head><title>404 Not Found</title></head>\\r\\n<body>\\r\\n<center><h1>404 Not Found</h1></center>\\r\\n<hr><center>nginx/1.20.2</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test01_GoodsCreate.Test_Goods object at 0x000002A3F0C1FEE0>\ndata = {'ageRangeId': None, 'attributeType': 0, 'bandId': None, 'batchNumberFlag': 0, ...}\nmoduleId = '120003'\n\n    @pytest.mark.parametrize(\"data,moduleId\",build_data(json_file=config.BASE_PATH+\"/data/GoodsCreate.json\"))\n    def test01_GoodsCreate(self,data,moduleId):\n        json_Data = {\"data\": data, \"moduleId\": moduleId}\n    \n        r = self.GoodsAPI.goodsCreate(json_data=json_Data)\n>       print(r.json())\n\ntest01_GoodsCreate.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\.venv\\lib\\site-packages\\requests\\models.py:978: JSONDecodeError"}, "parameters": [{"name": "data", "value": "{'languageMap': None, 'code': 'LcfTestGoods1', 'name': '流川枫测试货品1', 'type': 2, 'buildDate': '2024-07-10', 'mnemonicCode': None, 'notes': None, 'brandId': 2376490204342786, 'categoryId': 2397027655822126, 'seriesId': None, 'patternId': 2397027655821879, 'styleId': 2397027655821843, 'saleClassId': 2397027655830051, 'yearId': None, 'seasonId': None, 'bandId': None, 'materialId': None, 'sexId': None, 'ageRangeId': None, 'legalPersonId': None, 'exchangeCategoryId': None, 'sizeClassId': None, 'modelClassId': None, 'qrcodeLink': None, 'metricFlag': 0, 'uniqueCodeFlag': 0, 'batchNumberFlag': 0, 'customFlag': 0, 'goodsLongList': [], 'category': [], 'buildRuleId': None, 'washGroupId': None, 'attributeType': 0, 'singleGoodsStandardFlag': 0, 'fieldAreaList': [{'id': 2397027655830051, 'createdBy': 6877239110796543, 'createdByName': '管理员', 'createdTime': '2024-04-09 15:25:15', 'updatedBy': 6877239110796543, 'updatedByName': '管理员', 'updatedTime': '2024-04-09 15:25:15', 'parentId': 0, 'depth': 1, 'name': '正品', 'languageMap': None, 'code': None, 'dataId': 2396913217022464, 'type': 5, 'orderNumber': 1}, {'id': 2397027655822126, 'createdBy': 6877239110796543, 'createdByName': '管理员', 'createdTime': '2024-04-09 15:25:15', 'updatedBy': 6877239110796543, 'updatedByName': '管理员', 'updatedTime': '2024-04-09 15:25:15', 'parentId': 2397027655830051, 'depth': 2, 'name': '下装', 'languageMap': None, 'code': '下装', 'dataId': 2396921451383305, 'type': 1, 'orderNumber': 1}, {'id': 2397027655821879, 'createdBy': 6877239110796543, 'createdByName': '管理员', 'createdTime': '2024-04-09 15:25:15', 'updatedBy': 6877239110796543, 'updatedByName': '管理员', 'updatedTime': '2024-04-09 15:25:15', 'parentId': 2397027655822126, 'depth': 3, 'name': '裙子', 'languageMap': None, 'code': '裙子', 'dataId': 2396986945522178, 'type': 3, 'orderNumber': 1}, {'id': 2397027655821843, 'createdBy': 6877239110796543, 'createdByName': '管理员', 'createdTime': '2024-04-09 15:25:15', 'updatedBy': 6877239110796543, 'updatedByName': '管理员', 'updatedTime': '2024-04-09 15:25:15', 'parentId': 2397027655821879, 'depth': 4, 'name': '女装裙子', 'languageMap': None, 'code': '女装裙子', 'dataId': 2396997539129881, 'type': 4, 'orderNumber': 1}], 'customFieldMap': {}, 'colorList': [], 'sizeDisableList': [], 'tagPriceList': [{'id': '', 'goodsId': '', 'requireFlag': False, 'priceTypeId': 2247534056647168, 'name': '出货价', 'code': '', 'tagPrice': '', 'unitId': ''}, {'id': '', 'goodsId': '', 'requireFlag': False, 'priceTypeId': 1857741475916288, 'name': '吊牌价', 'code': '', 'tagPrice': 1000, 'unitId': ''}], 'category1': None, 'category2': None, 'category3': None, 'moduleId': '120003'}"}, {"name": "moduleId", "value": "'120003'"}], "start": 1720680983125, "stop": 1720680983161, "uuid": "e07beb8d-5410-4c04-89a0-5cfcbc61a219", "historyId": "3897234a2e092441cb43117625e6f124", "testCaseId": "e8228cdf41940e463eaf6cd24dc3702e", "fullName": "TestCase.Goods.test01_GoodsCreate.Test_Goods#test01_GoodsCreate", "labels": [{"name": "parentSuite", "value": "TestCase.Goods"}, {"name": "suite", "value": "test01_GoodsCreate"}, {"name": "subSuite", "value": "Test_Goods"}, {"name": "host", "value": "Clean"}, {"name": "thread", "value": "7260-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.Goods.test01_GoodsCreate"}]}